{
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    },
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    }
  },
  "nbformat_minor": 4,
  "nbformat": 4,
  "cells": [
    {
      "cell_type": "code",
      "source": "1 tmport math\n2 def minimax (\ncurDepth, nodeIndex, maxTurn, scores,\n3\ntargetDepth):\n4 5\nif (curDepth == targetDepth):\n6\nreturn scores [nodeIndex]\n7\ntf (maxTurn):\nreturn max(minimax (curDepth + 1, nodeIndex * 2,\n8\n9\nFalse, scores, targetDepth),\n10\nminimax(curDepth + 1, nodeIndex 2+1,\nFalse, scores, targetDepth))\n11 12\nelse:\nreturn min(minimax (curDepth 1, nodeIndex * 2,\n13 14\n15\nTrue, scores, targetDepth),\nminimax(curDepth 1, nodeIndex 2+1,\n16\nTrue, scores, targetDepth))\n17 scores [3, 5, 2, 9, 12, 5, 23, 23]\n18 treeDepth = math.log(len(scores), 2)\nA\n19 print(\"The optimal value is : \", end = \"\") 20 print(minimax(0, 0, True, scores, treeDepth))\n21",
      "metadata": {},
      "execution_count": null,
      "outputs": []
    }
  ]
}